{"componentChunkName":"component---src-templates-blog-post-js","path":"/Testing/worthy_testing/","result":{"data":{"site":{"siteMetadata":{"title":"개발 블로그","author":"Phil","siteUrl":"https://goohooh.github.io","comment":{"disqusShortName":"","utterances":"JaeYeopHan/gatsby-starter-bee"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"06fd922c-7bfd-5a9f-9acd-64ff90e4338d","excerpt":"실패할 가치가 있는 테스트를 만든다 “작은 함수로 테스트를 시작하는 건 좋은 접근이었습니다. 하지만 그게 private한 함수라면 효용성이 낮죠.“ 제가 처음 시도한 테스트에 대한 프론트 팀 리드 Ted의 피드백이었습니다. 저는 ‘Merlin(캐시노트 리뉴얼 버전 웹 저장소) 테스트 커버리지 10% 달성‘을 2021년 3분기 개인 목표로 잡았고, 일단 가장 시작하기 쉬워 보이는 부분을 찾아 테스트를 작성했습니다. 하지만 이는 결과적으로 근시안적인 접근이었습니다. Ted…","html":"<h1 id=\"실패할-가치가-있는-테스트를-만든다\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%ED%8C%A8%ED%95%A0-%EA%B0%80%EC%B9%98%EA%B0%80-%EC%9E%88%EB%8A%94-%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%A5%BC-%EB%A7%8C%EB%93%A0%EB%8B%A4\" aria-label=\"실패할 가치가 있는 테스트를 만든다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실패할 가치가 있는 테스트를 만든다</h1>\n<p>“작은 함수로 테스트를 시작하는 건 좋은 접근이었습니다. 하지만 그게 private한 함수라면 효용성이 낮죠.“</p>\n<p>제가 처음 시도한 테스트에 대한 프론트 팀 리드 Ted의 피드백이었습니다. 저는 <strong>‘Merlin(캐시노트 리뉴얼 버전 웹 저장소) 테스트 커버리지 10% 달성</strong>‘을 2021년 3분기 개인 목표로 잡았고, 일단 가장 시작하기 쉬워 보이는 부분을 찾아 테스트를 작성했습니다. 하지만 이는 결과적으로 근시안적인 접근이었습니다.</p>\n<p>Ted가 테스트를 추가해보는 게 어떠냐고 제안하셨던 React 컴포넌트는 이렇게 생겼습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">AwesomeComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* 초기화 */</span>\n\n  <span class=\"token keyword\">const</span> someState <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token comment\">/* condition1 */</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token string\">'hi'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token comment\">/* condition2 */</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token comment\">/* condition3 */</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> coolLib<span class=\"token punctuation\">.</span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bye'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* JSX 템플릿 */</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">someState</code>를 만들어내는 부분이 즉시실행 함수(IIFE)로 컴포넌트 코드 내에 선언돼 있었고, 여러 개의 조건문으로 인해 가독성이 떨어지는 상황이었습니다. 이 복잡한 IIFE를 밖으로 추출해서 테스트를 만드는 게 가장 쉬워 보였기 때문에 이것부터 시작했죠. 작게라도 성공 사례를 만들면, 동료들도 내가 작성한 가이드를 보면서 “이런 원리로 만들었구나”하고 쉽게 받아들일 수 있도록 하자는 생각이었습니다. 테스트를 만들고 난 후에는 “0.001%(?) 정도 테스트 커버리지가 올랐겠지”라는 생각에 뿌듯함도 살짝 느꼈습니다.</p>\n<p>하지만 이 생각은 곧 바뀌었습니다. Ted와 주간 체크인 미팅에서 테스트를 검토한 결과, 이 함수는 완벽히 위 컴포넌트의 private 함수이고, 이런 함수는 테스트해봤자 큰 효용이 없다는 결론에 도달했습니다.</p>\n<p>React 컴포넌트 테스트의 목적은 “이런 조건의 사용자에게는 이렇게 렌더링되는지”를 확인하는 데에 있습니다. 사실 사용자 입장에서는 직접적으로 외부로 노출되는 컴포넌트가 어떻게 렌더링되는지가 중요하지, 중간에 어떤 과정을 거쳐 렌더링 결과가 나왔는지는 중요하지 않습니다. 렌더링 결과만 동일하다면 내부 구현은 얼마든지 바뀌어도 됩니다. 거꾸로 말하면, 사용자에게는 정상적으로 컴포넌트가 표시되는 상태에서도 내부 구현에 대한 테스트는 실패할 수 있습니다. 따라서 내부 구현에 대한 테스트는, 실패하기는 쉬운데 실패했을 때 개발자에게 주는 유용한 정보는 별로 없는 (i.e., 구현 변경사항 맞춰 테스트를 그대로 변경하는) 상태가 되기 쉽습니다.</p>\n<p>이를 통해 저는 테스트의 목적과 가치를 잘 고려해야 한다는 점을 배웠습니다. <strong>여러 곳에서 여러 방법으로 사용되는 코드일수록 테스트할 가치가 높으며, 깨졌을 때 유용한 정보를 얻을 수 있습니다.</strong> 위 코드에서는 <code class=\"language-text\">AwesomeComponent</code> 전체를 테스트하는게 더 가치가 높다고 볼 수 있습니다.</p>\n<blockquote>\n<p>TDD를 하고 있다면 얼마든지 private 함수를 테스트하게될 수 있습니다. 물론 그 브랜치가 머지되기 전에는 그때까지 만들어진 private 함수들의 테스트를 걷어내야겠지만요.</p>\n<p><em>by Ted</em></p>\n</blockquote>\n<h1 id=\"테스트를-위한-테스트는-피한다\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%A5%BC-%EC%9C%84%ED%95%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%8A%94-%ED%94%BC%ED%95%9C%EB%8B%A4\" aria-label=\"테스트를 위한 테스트는 피한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테스트를 위한 테스트는 피한다</h1>\n<p>이번에는 여러 곳에서 공통으로 사용하는 코드를 살펴봤습니다. <code class=\"language-text\">Merlin</code> 프로젝트에서는 여러 페이지에서 유사한 비즈니스 로직을 활용하는 코드를 분리해서 <code class=\"language-text\">domains</code> 라는 폴더 밑에서 별도 파일로 관리하고 있습니다. 태생부터가 여러 곳에서 사용하기 위한 코드이니만큼, <code class=\"language-text\">domains</code> 의 코드들은 분명 테스트 대상 1순위라고 볼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">export</span> <span class=\"token function\">useComplicatedHook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data1 <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useDomainRelated1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// GraphQL API 호출</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data2 <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useDomainRelated2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// GraphQL API 호출</span>\n\n  <span class=\"token comment\">/* data1과 data2의 가공 및 처리 */</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// complicated object</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 hook은 API 를 호출하는 부분과 데이터를 가공 및 처리하는 두 부분으로 이루어져 있습니다. 여기서 API를 호출하는 부분은 가짜 응답으로 mocking하는 것이 번거로우니, 테스트하기 쉽게 데이터를 가공 및 처리하는 부분을 별도 함수로 빼내서 테스트하는 건 어떨까, 라는 생각을 했습니다만.. (빼내려고 했던 코드가, 첫번째 사례처럼 hook의 입장에서 private 한 코드라는 점은 차치하고라도) 여기서도 좀 더 생각할 부분이 있다는 Ted의 지적을 받았습니다.</p>\n<p>유지보수하기 더 쉬운 방향으로 코드 구조를 바꾸고, 그럼으로써 테스트하기 쉽게 되는 건 아주 좋습니다. 그러나 테스트하기 어렵다는 이유만으로 코드 구조를 바꾸는 것은 논리의 선후가 뒤바뀐 발상이 아닐까 싶습니다. 저로서는 피하고 싶은 ‘테스트만을 위한 테스트’입니다.</p>\n<h1 id=\"테스트-작성시-미리-고려할-사항들\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%9E%91%EC%84%B1%EC%8B%9C-%EB%AF%B8%EB%A6%AC-%EA%B3%A0%EB%A0%A4%ED%95%A0-%EC%82%AC%ED%95%AD%EB%93%A4\" aria-label=\"테스트 작성시 미리 고려할 사항들 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테스트 작성시 미리 고려할 사항들</h1>\n<p>TDD를 하고있는 상황이 아니라면, 테스트를 작성할 때 “Why”를 먼저 생각해 봐야합니다. 단순히 커버리지에 집중했다간 의미없이 시간낭비만 하게 되는 꼴이니까요. 앞으로 테스트 작성할 때 다음 사항들을 고려해봅시다.</p>\n<ul>\n<li>테스트 대상이 여러 곳에서 사용되는가?</li>\n<li>자명하지 않은 이유로 실패할 수 있는 테스트인가?</li>\n<li>테스트를 더 용이하게 만들기 위해 구조를 바꿔야 한다면, 그 구조 변경이 테스트가 아닌 다른 측면의 이득도 주는가?</li>\n</ul>\n<p>부족한 경험과 지식으로 테스트를 작성하다보면, 생각 이상으로 시간을 잡아먹는 부분이 많이 발생합니다.(특히나 삽질을 많이 하게 됩니다…) 때론 내가 잘 하고 있는건지, 허튼짓을 하는건 아닌지 의문이 들기도 합니다. 하지만 위 질문의 대답이 모두 Yes라면, 적어도 시간낭비를 하고 있는건 아니니 용기를 내어 마음껏 테스트를 작성해봅시다! 🙂</p>","frontmatter":{"title":"미니멀리즘 프론트엔드 테스트","date":"December 30, 2021"}}},"pageContext":{"slug":"/Testing/worthy_testing/","previous":null,"next":{"fields":{"slug":"/Testing/tdd/"},"frontmatter":{"title":"불멸의 프론트엔드 TDD"}}}},"staticQueryHashes":["2486386679","3128451518"]}