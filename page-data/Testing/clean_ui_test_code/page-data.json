{"componentChunkName":"component---src-templates-blog-post-js","path":"/Testing/clean_ui_test_code/","result":{"data":{"site":{"siteMetadata":{"title":"goohooh.github.io","author":"Phil","siteUrl":"https://goohooh.github.io","comment":{"disqusShortName":"","utterances":"goohooh/goohooh.github.io"},"sponsor":{"buyMeACoffeeId":"phil.lee"}}},"markdownRemark":{"id":"6955a5f4-5dfd-58e9-a00a-3ac5a6f2607a","excerpt":"UI 통합테스트를 작성하다보면 몇가지 문제점을 마주칩니다. (Jest, React, Typescript 환경 예시) 단벌의 테스트 케이스라면 위 모킹은 문제가 되지 않습니다. 하지만 테스트 케이스가 늘어날 경우 을 여러곳에서 사용할 경우 모킹할 함수가 늘어나거나, 모킹할 데이터 구조가 복잡해질 경우\n다음과 같은 문제가 발생합니다. 모킹 코드때문에 테스트 코드 자체의 가독성이 떨어진다. 단 몇 줄의 테스트코드를 위해 몇십 줄이 넘는 Mocking…","html":"<p>UI 통합테스트를 작성하다보면 몇가지 문제점을 마주칩니다. (Jest, React, Typescript 환경 예시)</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> mocked <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'ts-jest/utils'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> getPostsHook <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./hooks'</span>\n\njest<span class=\"token punctuation\">.</span><span class=\"token function\">mock</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./hooks'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> mockedGetPostsHook <span class=\"token operator\">=</span> <span class=\"token function\">mocked</span><span class=\"token punctuation\">(</span>getPostsHook<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'유저는 자신이 작성한 Post의 리스트를 볼 수 있다'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  mockedGetPostsHook<span class=\"token punctuation\">.</span><span class=\"token function\">mockReturnValueOnce</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">revolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span> title<span class=\"token operator\">:</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> title<span class=\"token operator\">:</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>Component<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> items <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> screen<span class=\"token punctuation\">.</span><span class=\"token function\">findByRole</span><span class=\"token punctuation\">(</span><span class=\"token string\">'listitem'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>단벌의 테스트 케이스라면 위 모킹은 문제가 되지 않습니다. 하지만</p>\n<ul>\n<li>테스트 케이스가 늘어날 경우</li>\n<li><code class=\"language-text\">getPostsHook</code>을 여러곳에서 사용할 경우</li>\n<li>모킹할 함수가 늘어나거나, 모킹할 데이터 구조가 복잡해질 경우\n다음과 같은 문제가 발생합니다.</li>\n<li>모킹 코드때문에 테스트 코드 자체의 가독성이 떨어진다. <em>단 몇 줄의 테스트코드를 위해 몇십 줄이 넘는 Mocking코드가 하나의 파일</em>에 필요하다.</li>\n<li>데이터 스키마가 바뀔 경우 관리하기 어렵다</li>\n</ul>\n<blockquote>\n<p>Jest에서 제공하는 Manual Mock을 사용하면 해결되지 않나?\n맞습니다. 위 문제들을 <em>완화</em>시킬 수 있습니다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// __mocks__/hooks.js</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">POSTS</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> title<span class=\"token operator\">:</span> <span class=\"token string\">'a'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> title<span class=\"token operator\">:</span> <span class=\"token string\">'b'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getPostsHook</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token constant\">POSTS</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>테스트코드는 이렇게 변합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\">jest<span class=\"token punctuation\">.</span><span class=\"token function\">mock</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./hooks'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test case 1'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>Component<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> items <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> screen<span class=\"token punctuation\">.</span><span class=\"token function\">findByRole</span><span class=\"token punctuation\">(</span><span class=\"token string\">'listitem'</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>🎉 깔끔해졌군요! 이제 끝일까요?</p>\n<h2 id=\"파편화\" style=\"position:relative;\"><a href=\"#%ED%8C%8C%ED%8E%B8%ED%99%94\" aria-label=\"파편화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>파편화</h2>\n<p>A라는 유저는 2개의 Post를 작성했다고 가정해보겠습니다. 반면 B라는 유저가 0개의 Post를 작성하였고, 디자인팀은 이런 경우 다른 UI가 그려지길 원합니다.</p>\n<p>2개의 다른 케이스를 커버하기 위해 2벌의 테스트를 작성해야합니다. 아까 모킹했던 함수<code class=\"language-text\">getPostsHook</code>는 이에 대응할 수 있을까요?</p>\n<p>단순히 생각하면 <code class=\"language-text\">__mocks__/hooks.ts</code> 의 코드를 수정하면 됩니다. 인자를 넘겨 다른 값을 리턴하도록 말이죠. 옳은 방법일까요?</p>\n<p>함수는 2개로 파편화 됐습니다. 개발자가 관여하지 않는 이상, 테스트용 함수는 원본 함수의 변경을 감지하지 못합니다. 실제 함수에 버그가 생겨도 테스트용 함수는 제 몫을 하지 못합니다.</p>\n<h2 id=\"msw와-mswjsdata\" style=\"position:relative;\"><a href=\"#msw%EC%99%80-mswjsdata\" aria-label=\"msw와 mswjsdata permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MSW와 MSWJS/data</h2>\n<p><a href=\"https://mswjs.io/\">MSW</a>자체는 최근들어 주목받는 라이브러리입니다.</p>\n<blockquote>\n<p>Mock by intercepting requests on the network level. Seamlessly reuse the same mock definition for testing, development, and debugging.</p>\n</blockquote>\n<p>네트워크 호출을 가로채서 seamless한 모킹 경험을 제공하는 것이 핵심입니다. 그리고 <a href=\"https://github.com/mswjs/data\">@mswjs/data</a> 라는 모듈을 추가적으로 제공합니다.</p>\n<blockquote>\n<p>Model and query your mock data (fixtures).</p>\n</blockquote>\n<p>간단히 이야기하자면, MSW Ecosystem으로 우리만의 서버를 만들 수 있게됐습니다! 테스트 환경에서든, 백엔드가 준비되지 않은 개발 환경에서든 말이죠.(후자의 경우 <a href=\"https://tech.kakao.com/2021/09/29/mocking-fe/\">Mocking으로 생산성까지 챙기는 FE 개발 – tech.kakao.com</a> 에서 자세하게 살펴보실 수 있습니다)</p>\n<p>아래는 테스트환경의 간단한 예시 코드입니다. 최대한 책임을 분리하여 작성했습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// schema</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> factory<span class=\"token punctuation\">,</span> primaryKey <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@mswjs/data'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> schema <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  post<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token function\">primaryKey</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    title<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// seed</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">runMigration1</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">db</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  db<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> title<span class=\"token operator\">:</span> <span class=\"token string\">'Hello'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  db<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span> title<span class=\"token operator\">:</span> <span class=\"token string\">'Bye'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// db</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> factory <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@mswjs/data'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> migration1 <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./seed'</span>\n<span class=\"token keyword\">import</span> schema <span class=\"token keyword\">from</span> <span class=\"token string\">'./schema'</span>\n\n<span class=\"token keyword\">const</span> db <span class=\"token operator\">=</span> <span class=\"token function\">factory</span><span class=\"token punctuation\">(</span>schema<span class=\"token punctuation\">)</span>\n<span class=\"token function\">runMigration1</span><span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> db\n\n<span class=\"token comment\">// server</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> rest <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'msw'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> setupServer <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'msw/node'</span>\n<span class=\"token keyword\">import</span> db <span class=\"token keyword\">from</span> <span class=\"token string\">'./db'</span>\n\n<span class=\"token comment\">// setupServer의 인자로 들어간 handler도 파일을 분리할 수 있지만</span>\n<span class=\"token comment\">// 편의를 위해 한곳에 작성했습니다.</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> <span class=\"token function\">setupServer</span><span class=\"token punctuation\">(</span>\n  rest<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/posts'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> ctx</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> posts <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">.</span><span class=\"token function\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">res</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>posts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>간단하게 만드려 했지만, 사실 꽤나 품이 많이 듭니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/* setupTest */</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> server <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./server'</span>\n\n<span class=\"token comment\">// 테스트 전에 모든 요청을 intercept하는 layer 생성</span>\n<span class=\"token function\">beforeAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> server<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 요청 interception layer를 제거하여 side effect 차단</span>\n<span class=\"token function\">afterAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> server<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">/* 테스트 파일 */</span>\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Post 데이터를 렌더링 한다'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>Component<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> items <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> screen<span class=\"token punctuation\">.</span><span class=\"token function\">findByRole</span><span class=\"token punctuation\">(</span><span class=\"token string\">'listitem'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이제 더이상 테스트 코드 안에 Mocking 코드는 존재하지 않습니다. 이로써</p>\n<ul>\n<li>가독성 확보</li>\n<li>코드 파편화 방지(원본 코드를 그대로 사용)</li>\n<li>그리고 Fixture의 형태, 필드 타입, 관계 정의 및 관리 용이성 확보\n가 가능해졌습니다.(아직 설명 하지 않았지만 mswjs/data로 데이터간 relation도 정의할 수 있습니다)</li>\n</ul>\n<h2 id=\"실전-예시\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%EC%A0%84-%EC%98%88%EC%8B%9C\" aria-label=\"실전 예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실전 예시</h2>\n<p>조금더 실전적인 시나리오를 작성해 봅시다. User와 Post관계를 정립하고, Post를 작성한 경우, 작성하지 않은 경우 2벌의 테스트를 작성해야하고 유저의 세션관리도 필요합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// schema</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> manyOf<span class=\"token punctuation\">,</span> nullable<span class=\"token punctuation\">,</span> oneOf<span class=\"token punctuation\">,</span> primaryKey <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@mswjs/data'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> schema <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  user<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token function\">primaryKey</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    name<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n    posts<span class=\"token operator\">:</span> <span class=\"token function\">manyOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'post'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  post<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token function\">primaryKey</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    title<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// seed</span>\n<span class=\"token keyword\">const</span> posts <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  db<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> title<span class=\"token operator\">:</span> <span class=\"token string\">'Hello'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  db<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span> title<span class=\"token operator\">:</span> <span class=\"token string\">'Bye'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span>\n\ndb<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'has-posts'</span><span class=\"token punctuation\">,</span> posts <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\ndb<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'no-posts'</span><span class=\"token punctuation\">,</span> posts<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// session</span>\n<span class=\"token comment\">// 프로젝트 별로 세션관리는 상이하며, 이에따라 구현은 달라질 수 있습니다</span>\n<span class=\"token keyword\">import</span> crypto <span class=\"token keyword\">from</span> <span class=\"token string\">'crypto'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> sessionStorage <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getAuthToken</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">request</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> request<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'authorization'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getSessionUser</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">request</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> <span class=\"token function\">getAuthToken</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> sessionStorage<span class=\"token punctuation\">[</span>token<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">setSessionUser</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> crypto<span class=\"token punctuation\">.</span><span class=\"token function\">randomBytes</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hex'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  sessionStorage<span class=\"token punctuation\">[</span>token<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> user<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> token<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">clearSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  sessionStorage <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// handlers</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> handlers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  rest<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/login\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> ctx</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> login <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>variables<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span>account<span class=\"token punctuation\">.</span><span class=\"token function\">findFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      where<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> equals<span class=\"token operator\">:</span> login <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> <span class=\"token function\">setSessionUser</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token function\">res</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> token<span class=\"token punctuation\">,</span> user <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  rest<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/posts\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> ctx</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token function\">getSessionUser</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t  <span class=\"token keyword\">return</span> <span class=\"token function\">res</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> posts<span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>posts <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>클라이언트의 로그인 또한 프로젝트 구현에 따라 달라질 수 있습니다. 테스트용 로그인 helper를 만들었다 가정을 합니다</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Post를 작성한 유저는 모든 Post를 볼 수 있다.'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">renderWithLogin</span><span class=\"token punctuation\">(</span>Component<span class=\"token punctuation\">,</span> <span class=\"token string\">'has-posts'</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> items <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> screen<span class=\"token punctuation\">.</span><span class=\"token function\">findByRole</span><span class=\"token punctuation\">(</span><span class=\"token string\">'listitem'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Post를 작성하지 않은 유저는 `글쓰기` 버튼을 노출한다.'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">renderWithLogin</span><span class=\"token punctuation\">(</span>Component<span class=\"token punctuation\">,</span> <span class=\"token string\">'no-posts'</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> button <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> screen<span class=\"token punctuation\">.</span><span class=\"token function\">findByRole</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'글쓰기'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>button<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeInDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"다-좋은데-구조가-너무-복잡해지는-아닌가요\" style=\"position:relative;\"><a href=\"#%EB%8B%A4-%EC%A2%8B%EC%9D%80%EB%8D%B0-%EA%B5%AC%EC%A1%B0%EA%B0%80-%EB%84%88%EB%AC%B4-%EB%B3%B5%EC%9E%A1%ED%95%B4%EC%A7%80%EB%8A%94-%EC%95%84%EB%8B%8C%EA%B0%80%EC%9A%94\" aria-label=\"다 좋은데 구조가 너무 복잡해지는 아닌가요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>다 좋은데, 구조가 너무 복잡해지는 아닌가요?</h2>\n<p>MSW를 통해</p>\n<ul>\n<li>테스트 코드 가독성</li>\n<li>모킹데이터 관리 용이성</li>\n</ul>\n<p>을 얻어냈지만, 비용 또한 만만치 않습니다. 이미 보셨듯 꽤나 공수가 들어가는 작업입니다. 그렇기에 모든 테스트를 이와같이 작성하고, 이를 유지보수하기란 쉽지 않습니다.</p>\n<p>따라서 trade-off를 고려하여, 다음과 같은 경우 MSW를 통한 UI 통합 테스트를 작성하면 좋겠습니다.</p>\n<ul>\n<li>복잡한 Mocking 데이터가 많이 필요한 테스</li>\n<li>실패하면 안되는 Critical한 UI 테스트트</li>\n</ul>","frontmatter":{"title":"MSW를 활용한 Clean UI Test Code","date":"March 26, 2022"}}},"pageContext":{"slug":"/Testing/clean_ui_test_code/","previous":{"fields":{"slug":"/animation/flip_animation_with_react/"},"frontmatter":{"title":"FLIP과 WAAPI를 이용한 React 애니메이션"}},"next":null}},"staticQueryHashes":["3128451518","4270334088"]}