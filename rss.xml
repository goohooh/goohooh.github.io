<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[goohooh.github.io]]></title><description><![CDATA[개발일지]]></description><link>https://goohooh.github.io</link><generator>GatsbyJS</generator><lastBuildDate>Fri, 25 Feb 2022 13:21:18 GMT</lastBuildDate><item><title><![CDATA[FLIP과 WAAPI를 이용한 React 애니메이션]]></title><description><![CDATA[들어가기 앞서 Visual Feedback을 통해 유저에게 더 나은 경험을 제공할 수 있다는 것을 짚고 넘어가려 합니다. 동적임에도 정적으로 느껴지는 UI는(DOM Element…]]></description><link>https://goohooh.github.io/animation/flip_animation_with_react/</link><guid isPermaLink="false">https://goohooh.github.io/animation/flip_animation_with_react/</guid><pubDate>Fri, 25 Feb 2022 21:00:00 GMT</pubDate><content:encoded>&lt;p&gt;들어가기 앞서 Visual Feedback을 통해 유저에게 더 나은 경험을 제공할 수 있다는 것을 짚고 넘어가려 합니다. 동적임에도 정적으로 느껴지는 UI는(&lt;em&gt;DOM Element가 ‘띡’하고 나타났다 사라지는 등&lt;/em&gt;) 유저에게 미세한 인지부하를 일으킬 수 있습니다. 컨텍스트가 ‘전환’되는 상황을 유저 스스로의 힘으로 파악해야 합니다. 개발자가 조금 더 신경쓴다면 이는 큰 UX 개선으로 이어질 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/0987e1f2d1f7aae34534272c80ac456a/material_animation.gif&quot; alt=&quot;material animation&quot;&gt;&lt;/p&gt;
&lt;p&gt;하지만 슬프게도, 당장 기능개발이 필요한 상황에 놓인 프론트 개발자에게 UX 개선은 늘 우선순위에서 뒤쳐지기 마련입니다. 공부해야할 것도 많고, 막상 찾아보면 hacky한 코드들을 많이 마주하게 됩니다.(특히나 React에서 구현하려면…) 네, UX관련 Task를 내려놓는 소리가 들리네요. 🙁 하지만 FLIP과 WAAPI가 우리를 도와줄겁니다!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// FLIP Before the WAAPI&lt;/span&gt;
el&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;style&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;transform &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;translateY(200px)&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;requestAnimationFrame&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  el&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;style&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;transform &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;flip-그게-뭔데&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#flip-%EA%B7%B8%EA%B2%8C-%EB%AD%94%EB%8D%B0&quot; aria-label=&quot;flip 그게 뭔데 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;FLIP? 그게 뭔데?&lt;/h2&gt;
&lt;p&gt;JS를 이용하여 DOM 요소의 &lt;code class=&quot;language-text&quot;&gt;width, height, top, left&lt;/code&gt; 를 계산하여 애니메이션을 만들 때, &lt;strong&gt;버벅거림&lt;/strong&gt;을 경험할 수 있습니다. 앞선 property들의 변경은 Layout 변경을 유발하고, 브라우저는 다른 요소들의 Layout 또한 다시 계산해야하기 때문에 재귀적으로 문서의 모든 요소를 순회해야합니다. 이때 만약 해당 연산이 16.7ms를 넘어간다면, 그순간의 애니메이션 프레임은 화면에 그리지 않고 유저는 &lt;strong&gt;버벅임을&lt;/strong&gt; 느끼게 됩니다. 사람의 눈은 초당 60개 이상의 프레임(60 fps, 프레임당 16.7ms) 이상으로 그려지는 애니메이션에서 자연스러움을 느끼기 때문입니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;F&lt;/strong&gt;irst:애니메이션 변경이 생길 요소의 현재 상태(위치, 높낮이)를 캐싱합니다. &lt;code class=&quot;language-text&quot;&gt;Element.getBoundingClientRect()&lt;/code&gt; 를 사용합니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;L&lt;/strong&gt;ast: 변경을 유발하는 코드를 실행시켜서 즉시 최신 상태(위치, 높낮이)를 얻고 이를 기록합니다. 아직 Reflow단계이므로 화면에는 마지막 상태가 그려지지 않았습니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;I&lt;/strong&gt;nvert: 여기서 약간의 시각적 트릭을 사용합니다. 앞선 단계에서 캐싱했던 첫 혹은 이전 상태로 &lt;code class=&quot;language-text&quot;&gt;keyframe&lt;/code&gt;을 되돌립니다. &lt;code class=&quot;language-text&quot;&gt;WAAPI&lt;/code&gt; 의해 수행됩니다. DOM요소를 변경전 상태의 위치/높낮이로 그려냅니다. 마치 아직 변경이 발생하지 않은 ‘척’합니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;P&lt;/strong&gt;lay: 마찬가지로 &lt;code class=&quot;language-text&quot;&gt;WAAPI&lt;/code&gt;를 사용하여 &lt;code class=&quot;language-text&quot;&gt;keyframe&lt;/code&gt;을 최신상태로 만들어 애니메이션을 재생시킵니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Pau Lewis는 그의 &lt;a href=&quot;https://aerotwist.com/blog/flip-your-animations/&quot;&gt;블로그&lt;/a&gt;에서 이를 처음 소개했습니다.&lt;/p&gt;
&lt;h2 id=&quot;그럼-waapi는-뭐야&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B7%B8%EB%9F%BC-waapi%EB%8A%94-%EB%AD%90%EC%95%BC&quot; aria-label=&quot;그럼 waapi는 뭐야 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;그럼 WAAPI는 뭐야?&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Animations_API&quot;&gt;MDN 문서&lt;/a&gt;에서 잘 설명해주고 있으며, 지금 우리가 알아둘 것은 &lt;code class=&quot;language-text&quot;&gt;Element.animate()&lt;/code&gt; 입니다. 우리의 코드를 매우 우아하게 만들어줄 메서드입니다.&lt;/p&gt;
&lt;h2 id=&quot;react의-렌더링-사이클&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#react%EC%9D%98-%EB%A0%8C%EB%8D%94%EB%A7%81-%EC%82%AC%EC%9D%B4%ED%81%B4&quot; aria-label=&quot;react의 렌더링 사이클 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;React의 렌더링 사이클&lt;/h2&gt;
&lt;p&gt;React의 예시에서 이 FLIP테크닉을 사용하기 위해 다음 메서드를 이용합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;useEffect&lt;/code&gt; Paint 이후 콜백 실행. 최초의 캐싱&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;useLayoutEffect&lt;/code&gt;: Paint이전 동기적으로 콜백 실행. 여기서 얻은 DOM은 변경된 값들을 갖고 있으므로, 이전 캐시값과 함께 사용하여 &lt;code class=&quot;language-text&quot;&gt;transform&lt;/code&gt; 시킬 수 있음.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;예시-코드&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%98%88%EC%8B%9C-%EC%BD%94%EB%93%9C&quot; aria-label=&quot;예시 코드 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;예시 코드&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;tsx&quot;&gt;&lt;pre class=&quot;language-tsx&quot;&gt;&lt;code class=&quot;language-tsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;NEW_ITEMS&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;말밥&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;소밥&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;개구리밥&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Flipper&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; rectMap &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token generic-function&quot;&gt;&lt;span class=&quot;token function&quot;&gt;useRef&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Map&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; DOMRect&lt;span class=&quot;token operator&quot;&gt;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;current&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;items&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setItems&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;개밥&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;고양이밥&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// 최초 캐싱&lt;/span&gt;
  React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; elements &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
      document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token generic-function&quot;&gt;&lt;span class=&quot;token function&quot;&gt;querySelectorAll&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;HTMLLIElement&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;.flipper&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    elements&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      rectMap&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;el&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; el&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getBoundingClientRect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;rectMap&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;useLayoutEffect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; elements &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
      document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelectorAll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;.flipper&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    elements&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; cachedRect &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; rectMap&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;el&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cachedRect&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; nextRect &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; el&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getBoundingClientRect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        el&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;animate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            transform&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;translateY(&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;cachedRect&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;top &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; nextRect&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;top&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;px)&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            transform&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;translateY(0px)&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          duration&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          easing&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;ease-in-out&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        rectMap&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;el&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; nextRect&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;rectMap&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; items&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ul&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;items&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
          &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;item&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;flipper&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; newItems &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; items&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            newItems&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;unshift&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;NEW_ITEMS&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token function&quot;&gt;setItems&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;newItems&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;item&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;ul&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/ea87597b40a37e59c1d28e54a59fe965/animation_sample.gif&quot; alt=&quot;flip basic&quot;&gt;&lt;/p&gt;
&lt;p&gt;위 코드를 살짝 응용하면 opacity까지 추가된 애니메이션을 구현할 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/deb446f4cb2ed0372f273fb76c611ce7/stackform.gif&quot; alt=&quot;stack form&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;꼭-uselayouteffect를-써야할까&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%BC%AD-uselayouteffect%EB%A5%BC-%EC%8D%A8%EC%95%BC%ED%95%A0%EA%B9%8C&quot; aria-label=&quot;꼭 uselayouteffect를 써야할까 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;꼭 useLayoutEffect를 써야할까?&lt;/h2&gt;
&lt;p&gt;프론트팀 동료인 &lt;a href=&quot;https://github.com/parkoon&quot;&gt;Jayden&lt;/a&gt;의 호기심으로 &lt;code class=&quot;language-text&quot;&gt;useLayoutEffect&lt;/code&gt; 가 아닌 &lt;code class=&quot;language-text&quot;&gt;useEffect&lt;/code&gt;만 사용하면 어떨까 실험아닌 실험을 해봤습니다. 예상대로라면, &lt;code class=&quot;language-text&quot;&gt;useEffect&lt;/code&gt;의 콜백은 화면이 그려진 후 호출되므로&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;아주 잠깐 DOM요소가 최신 상태로 그려졌다가&lt;/li&gt;
&lt;li&gt;FLIP의 I 단계로 인해 이전상태로 되돌아간뒤&lt;/li&gt;
&lt;li&gt;다시 제자리를 찾아가는 괴상한 애니메이션이 그려질것&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;하지만 실험결과는 너무나 정상적인 애니메이션이 그려졌습니다. 머신이 빨라서(맥북 Pro) 사람 눈으로 인지를 못하나 싶어 개발도구 옵션으로 CPU제한을 걸고 고급 페인트 계측을 설정하여 오버헤드를 주어 봤지만 여전했습니다.&lt;/p&gt;
&lt;p&gt;미스터리를 해결하지 못한채 퇴근 후 codesandbox 박스에서 위 코드를 시켜봤습니다. &lt;code class=&quot;language-text&quot;&gt;useLayoutEffect&lt;/code&gt;가 아닌 &lt;code class=&quot;language-text&quot;&gt;useEffect&lt;/code&gt;만으로요. 그랬더니…&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/73c93d0f0ee24a5d42e83e1350a14e37/janky.gif&quot; alt=&quot;janky animation&quot;&gt;&lt;/p&gt;
&lt;p&gt;여러번 시도해본 결과 &lt;code class=&quot;language-text&quot;&gt;useEffect&lt;/code&gt;를 사용하면 간헐적으로 위와같이 ‘버벅거림’이 발생했습니다. 하지만 &lt;code class=&quot;language-text&quot;&gt;useLayoutEffect&lt;/code&gt;를 사용하면 저런 현상이 재현되지 않았습니다.(이또한 여러번 시도해보았습니다)&lt;/p&gt;
&lt;p&gt;제한적인 리소스 환경을 고려하여 렌더링 이전에 동기적으로 실행이 보장되는 &lt;code class=&quot;language-text&quot;&gt;useLayoutEffect&lt;/code&gt;가 더 안전한 사이클 훅이었다는 결론을 얻었습니다.&lt;/p&gt;
&lt;h2 id=&quot;애니메이션에-관심있는-프론트-엔드-개발자라면&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%95%A0%EB%8B%88%EB%A9%94%EC%9D%B4%EC%85%98%EC%97%90-%EA%B4%80%EC%8B%AC%EC%9E%88%EB%8A%94-%ED%94%84%EB%A1%A0%ED%8A%B8-%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EB%9D%BC%EB%A9%B4&quot; aria-label=&quot;애니메이션에 관심있는 프론트 엔드 개발자라면 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;애니메이션에 관심있는 프론트 엔드 개발자라면&lt;/h2&gt;
&lt;p&gt;FLIP 테크닉을 이용하여 이용자 친화적이고 멋진 UI를 만들어 보고싶은 욕구가 뿜뿜하지 않나요? 여러분들의 창의성으로 더욱 아름다워질 웹 생태계가 기대됩니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;references&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#references&quot; aria-label=&quot;references permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;References&lt;/h3&gt;
&lt;p&gt;아래 글들을 참고하여 작성하였습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://css-tricks.com/animating-layouts-with-the-flip-technique/&quot;&gt;https://css-tricks.com/animating-layouts-with-the-flip-technique/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://css-tricks.com/everything-you-need-to-know-about-flip-animations-in-react/&quot;&gt;https://css-tricks.com/everything-you-need-to-know-about-flip-animations-in-react/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://uxplanet.org/functional-animation-in-ux-design-what-makes-a-good-transition-d6e7b4344e5e&quot;&gt;https://uxplanet.org/functional-animation-in-ux-design-what-makes-a-good-transition-d6e7b4344e5e&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=s06Z_e8ac0Y&quot;&gt;https://www.youtube.com/watch?v=s06Z_e8ac0Y&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[이것저것 했구나, 2021년 회고]]></title><description><![CDATA[202…]]></description><link>https://goohooh.github.io/retrospective/2021/</link><guid isPermaLink="false">https://goohooh.github.io/retrospective/2021/</guid><pubDate>Sat, 08 Jan 2022 16:23:00 GMT</pubDate><content:encoded>&lt;p&gt;2021년은 변화가 많았던 해 였습니다. 몇 가지 키워드로 압축해볼 수 있겠습니다.&lt;/p&gt;
&lt;h2 id=&quot;-애자일&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-%EC%95%A0%EC%9E%90%EC%9D%BC&quot; aria-label=&quot; 애자일 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🌀 애자일&lt;/h2&gt;
&lt;p&gt;지금은 은밀하게 애자일을 실천하고 퍼뜨리기 위해 노력하고 있지만, 사실 이는 의도치 않게 시작됐습니다. 시작은 프론트엔드의 클린 코드/아키텍처를 고민하면서 부터였습니다. 제작년부터 관심을 기울이기 시작했고, 파고들어 가다보니 그 원류가 애자일에서 흘러나왔다는 걸 알게됐습니다. 전 직장(Buzzvil) 동료였던 Las로 부터 어떻게 애자일이 탄생됐고 어떻게 실천해나갈 수 있는지 배우며, 동시에 여러 서적과 자료들을 탐구하며 흠뻑 취해들었습니다. 그러다보니 자연스레 &lt;a href=&quot;https://goohooh.github.io/Testing/tdd/&quot;&gt;TDD 포스팅&lt;/a&gt;이 나오게되지 않았을까 생각합니다.&lt;/p&gt;
&lt;h2 id=&quot;-이직-금융&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-%EC%9D%B4%EC%A7%81-%EA%B8%88%EC%9C%B5&quot; aria-label=&quot; 이직 금융 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;💸 이직, 금융&lt;/h2&gt;
&lt;p&gt;3년간 정들었던 Buzzvil을 퇴사했습니다. 많은 추억과 좋은 동료들 덕분에 즐겁게 일했던 곳이었기에 쉽지 않은 결정이었습니다. 지금도 연락하며 지내는 옛 동료들과 함께 일했던 순간을 떠올리면 아쉬움과 함께 가슴 한켠이 아려옵니다. 하지만 프론트 개발자로서 더 큰 성장을 위해 선택을 할 수 밖에 없었고 지금도 그 선택에 후회는 없습니다.&lt;/p&gt;
&lt;p&gt;그렇게 KCD에서 새로운 시작을 하게 됐습니다. ‘캐시노트’라는 소상공인 대상 어플리케이션이 대표 제품입니다. 그 안에서도 ‘금융’파트에서 일하게 됐습니다. 정부 규제 속에서 금융 기관들과 함께 일 하는게 여간 쉽지는 않지만, 큰 임팩트를 줄 수 있는 도메인이란 것에 끌려 즐겁게 일하고 있습니다. 앞서 언급한 애자일적인 실험도 은밀히 즐기고 있습니다.&lt;/p&gt;
&lt;p&gt;사실 제 어머니께서 한복가게를 운영하셨었습니다. 무려 30년 가까이 운영하셨지만, 지금은 정리하셨습니다. 한복이라는 자부심으로 살아오셨지만, 불황으로 가게를 접으시고 한동안 매우 힘들어 하셨습니다. 그런 어머님을 옆에서 바라보며 도움을 드리지 못해 너무나 죄송하고 안타까웠습니다.&lt;/p&gt;
&lt;p&gt;그래서 KCD로 이직하며 마음속에 남아있던 응어리를 풀어볼 수 있겠다는 기대감이 컸습니다. 입사한지 9개월 남짓한 지금, 다행스럽게도 아직 그 기대는 유효합니다. 앞으로 더 큰 임팩트를 낼 수 있도록 많이 배우고 노력하겠다 마음을 다잡아 봅니다.&lt;/p&gt;
&lt;h2 id=&quot;-react-typescript-graphql-그리고-ruby&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-react-typescript-graphql-%EA%B7%B8%EB%A6%AC%EA%B3%A0-ruby&quot; aria-label=&quot; react typescript graphql 그리고 ruby permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;⚛ React, Typescript, Graphql 그리고… Ruby??&lt;/h2&gt;
&lt;p&gt;새로운 환경에 익숙해지기 까진 시간이 조금 필요했습니다.(Buzzvil에선 Vue/JS으로 개발했습니다) 이전에 React/Typescript/Graphql을 온라인 강의 및 토이 프로젝트로 경험하긴 했으나 Product 레벨로 개발하기 시작한건 KCD에 합류하고 나서부터 입니다. 어려운 점도 있었지만 새로운 스킬을 익히는게 뭐 늘 그렇죠.&lt;/p&gt;
&lt;p&gt;회사에서 Django나 Express를 사용했다면 백엔드도 건드려볼 텐데, 아쉽게도 Ruby on Rails를 사용하고 있습니다. 루비라… 선뜻 배우고 싶은 마음이 들지는 않아서, 멀리서 지켜보고만 있습니다.&lt;/p&gt;
&lt;h2 id=&quot;-youtube&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-youtube&quot; aria-label=&quot; youtube permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;📹 Youtube&lt;/h2&gt;
&lt;p&gt;2년 전 &lt;a href=&quot;https://www.youtube.com/channel/UCHINUsMM5UchJHPf4ybWWsQ&quot;&gt;개발 유튜브&lt;/a&gt;를 잠깐 했지만, 이내 소재가 고갈되어 그만 두었습니다. 그리고 올해, 코로나로 인해 계속된 재택근무로 어느새 술에 관심이 생겨서 &lt;a href=&quot;https://www.youtube.com/channel/UCZE5qi60t77sJKvoE8_9pWg&quot;&gt;술 컨텐츠로 다시 유튜브&lt;/a&gt;를 시작하게 됐습니다. 출연은 하지 않고, 촬영 및 편집을 맡고 있습니다. 예술혼(?)을 영상으로 승화시키기 시작했습니다. 아직은 동네 구멍가게보다 못한 수준이지만 재밌게 촬영하고 있습니다. 언젠간 수익금으로 해외 증류소 촬영을 가보고 싶습니다.&lt;/p&gt;
&lt;h2 id=&quot;-멘토링&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-%EB%A9%98%ED%86%A0%EB%A7%81&quot; aria-label=&quot; 멘토링 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🤝 멘토링&lt;/h2&gt;
&lt;p&gt;스파르타 코딩클럽 부트캠프 6기 멘토링을 맡아 진행했습니다. 저 또한 부트캠프를 통해 개발자로 첫발을 내딛었고, 그런 분들을 도와드리고 싶다는 생각에 선뜻 수락하여 시작하게 됐습니다. 프로젝트를 진행하실 때 어려운 부분들을 도와드리고 나아갈 방향을 제시해드리며 최선을 다해 멘토링을 진행했습니다. 수강생분들 모두 부디 좋은 곳에 취직하셔서 멋진 개발자로 성장하셨으면 좋겠습니다.&lt;/p&gt;
&lt;p&gt;동시에 Buzzvil 동료였던 Ethan이 무료 멘토링 프로젝트(Previewer)를 시작했고 여기서도 멘토를 자청했습니다.1대1로 진행하다 보니 더욱 진솔한 이야기를 나눌 수 있었고, 개중에는 대학생이지만 저보다도 뛰어난 분들을 만나뵙기도 했습니다. 덕분에 좋은 인연을 쌓을 수 있었던 시간이었습니다.&lt;/p&gt;
&lt;p&gt;하지만 지금은 멘토링을 잠시 쉬고있습니다. 한분한분 진심으로 도와드리고 싶은 마음이 컸던 탓에 에너지 소비가 너무 컸습니다. 주말에 휴식이나 공부를 하기 어려웠고 어쩔수 없이 스파르타 코딩클럽의 멘토링은 한 기수만 마무리하고 그만 두었습니다. 대신 스케쥴링이 자유로운 Previewer는 계속 하려 합니다. ‘최소 분기 1회 멘토링’이 조건이라 부담이 없습니다.&lt;/p&gt;
&lt;h2 id=&quot;-2022년엔-영어와-수학을&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-2022%EB%85%84%EC%97%94-%EC%98%81%EC%96%B4%EC%99%80-%EC%88%98%ED%95%99%EC%9D%84&quot; aria-label=&quot; 2022년엔 영어와 수학을 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;✍ 2022년엔 영어와 수학을!&lt;/h2&gt;
&lt;p&gt;Buzzvil에선 외국인 동료들이 있었기에 영어 환경에 쉽게 노출되었지만, 지금은 하루가 갈수록 영어를 까먹고 있습니다. 더이상은 안되겠다 싶어 작년 연말부터 회사 동료들과 리얼클래스를 함께 수강하고 있습니다. 매일 수강하겠다 마음 먹었지만 그게 참 쉽지는 않습니다… 한편으로 &lt;a href=&quot;http://www.yes24.com/Product/Goods/95276922&quot;&gt;영알남의 영어의 진실&lt;/a&gt;도 읽으며 영어감각을 놓치지 않기위해 발악하고 있습니다.&lt;/p&gt;
&lt;p&gt;그리고 2022년, 수학공부도 시작하려 합니다. 사실 이전에도 시도했지만 독학으로 하려다보니 쉽지 않았습니다. 그래서 숨고를 통해 과외를 신청했습니다. 아무래도 전문가에게 배우는게 더 빠를테니까요. 다음주부터 첫 수업입니다! 😊&lt;/p&gt;
&lt;p&gt;고등학생 시절 수학/과학을 좋아했지만 ‘대학을 가지 않겠다!’ 선언한 후부터 공부를 놓은 것이 너무나도 후회됩니다.(다행히 책은 원없이 읽었네요) 10년이 지나 굳은 머리로 다시 공부하려니 막막~하지만, 한편으로 설레기도 합니다. 마침 새해도 시작됐으니 더욱 그렇네요. 여러분들도 새해에는 설레는 일이 많으셨으면 좋겠습니다.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;아… 그리고 제발 지긋지긋한 이놈의 코로나도 종식되길…&lt;/strong&gt; 🙏&lt;/p&gt;</content:encoded></item><item><title><![CDATA[소통 위에 피어나는 프론트엔드 TDD]]></title><description><![CDATA[새로운 프로젝트를 시작할 때면, ‘TDD…]]></description><link>https://goohooh.github.io/Testing/tdd/</link><guid isPermaLink="false">https://goohooh.github.io/Testing/tdd/</guid><pubDate>Thu, 30 Dec 2021 15:05:00 GMT</pubDate><content:encoded>&lt;p&gt;새로운 프로젝트를 시작할 때면, ‘TDD를 제대로 해보자!’ 라는 결심을 새해 다짐처럼 하곤 했습니다. 그리고 대부분의 다짐 처럼, 그리 성공적이지 못했습니다. 스펙변경/일정압박/귀찮음 등 다양한 이유로 포기하기 일쑤였습니다. 그러면서 코딩하는 매순간 마음 한켠에 불편함이 함께 자리잡게 됐습니다.&lt;/p&gt;
&lt;p&gt;‘나중에 이 코드에서 오류가 난다면, 테스트를 작성하지 않은 탓인데…’ 하는 걱정과
‘모두가 테스트 코드를 꼼꼼히 작성하진 않잖아… 누군가 테스트 없이 짠 코드를 고치는 내 꼴을 봐…! 그리고 쌓여있는 저 태스크들 안보여?’ 라는 자기위안이 늘 충돌하곤 했습니다.&lt;/p&gt;
&lt;p&gt;다행히 현 직장(KCD)에서 이러한 걱정들을 조금씩 덜 수 있게 됐습니다. 프로덕트 안정성을 위해 세운 여러 initiative중, TDD를 분기 목표로 잡을 수 있게 됐습니다. 그리고 때마침 팀 리드(&lt;a href=&quot;https://steady-study.super.site/&quot;&gt;Ted&lt;/a&gt;)와 1on1 미팅에서 ‘개발 커뮤니케이션 코스트’를 주제로 이야기를 나누다 다음과 같은 조언을 받게 됩니다.&lt;/p&gt;
&lt;p&gt;“Shortcut*에 기능 설명이 아닌 유저 스토리를 작성해보시죠!”&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Shortcut&lt;/strong&gt;: 업무관리 툴, Trello나 Jira와 비슷한 서비스입니다. Shortcut에서는 하나의 업무 단위를 &lt;strong&gt;Story&lt;/strong&gt;라 표현합니다. Trello의 Card, Jira의 Issue 같은 개념입니다. 조금 더 고객향으로 사고를 전환할 수 있을 것 같지 않나요?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;-user-journey&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-user-journey&quot; aria-label=&quot; user journey permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🛤 User journey&lt;/h2&gt;
&lt;p&gt;조언대로 Story에 유저의 여정을 쪼개 작성했습니다. 개발 관련 표현은 최대한 피했습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;제목: 본인 인증이 완료된 유저는 계좌입력 페이지로 이동한다.&lt;/li&gt;
&lt;li&gt;본문: Figma 링크 및 개발/비지니스 배경 설명&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PM, 디자이너 혹은 관련자가 이 Story를 봤을 때 충분히 이해할 수 있는 수준으로 작성했습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;유저 입장에서 필요한 기능을 정의 내린다.&lt;/li&gt;
&lt;li&gt;유저 입장에서 실패/오류를 정의내린다&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;위 원칙을 기반으로 더 촘촘한 설계를 할 수 있으리라 기대했습니다. &lt;em&gt;‘개발 커뮤니케이션 코스트를 줄이기’&lt;/em&gt; 액션 아이템으로써, 기대했던 대로 기획 당시 보이지 않았던 부분들을 발견할 수 있었습니다. 코딩을 시작하기 전 미리 PM/디자이너와 논의하였고 수정할 수 있었습니다. 만약 기능에 대한 설명만 Story에 작성했다면, 개발자 외에는 이러한 허점을 잘 발견하지 못했을 부분이었습니다. 논의를 마치고 본격적인 개발에 착수했습니다. 새로운 브랜치를 만들고 시작하려는 찰나, 불편한 감정이 피어올랐습니다.&lt;/p&gt;
&lt;p&gt;‘TDD 안할거야…?’&lt;/p&gt;
&lt;p&gt;쓰라린 지난 기억들을 떠올리며 조금 망설였습니다. ‘그래도 시도해보자’ 마음을 다잡으며 이내 테스트 파일을 먼저 만들고 테스트를 작성했습니다. 그리고 신기하게도, 앞서 Story에 작성한 유저의 여정을 테스트 코드에 &lt;strong&gt;동일하게&lt;/strong&gt; 작성하기 시작했습니다. 이게 무슨 의미일까요?&lt;/p&gt;
&lt;h2 id=&quot;-추상화&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-%EC%B6%94%EC%83%81%ED%99%94&quot; aria-label=&quot; 추상화 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🎨 추상화&lt;/h2&gt;
&lt;p&gt;생각해보면 유저의 요구사항은 자연어로 등장합니다.&lt;/p&gt;
&lt;p&gt;“유저들의 포스트들을 필터링 해서 보고 싶어”&lt;/p&gt;
&lt;p&gt;이를 듣고 필요한 기능들을 생각해봅시다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;포스트 목록을 리턴할 API&lt;/li&gt;
&lt;li&gt;포스트 목록을 필터링 할 UI 컴포넌트&lt;/li&gt;
&lt;li&gt;포스트 목록을 보여줄 UI 컴포넌트&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;여기서 개발자라면 위 불렛 포인트들을 Task 관리 툴로 &lt;strong&gt;그대로 들고가서 똑같이&lt;/strong&gt; 작성할겁니다. 여기에 조금 더 상세한 기술적 디테일을 추가 하겠죠. 그리고 당연하게 이 목록을 업무 진행 척도로 삼을겁니다. 하지만 이 티켓(숏컷이라면 스토리)를 보게될 PM이나 디자이너의 생각은 다를 수 있습니다.&lt;/p&gt;
&lt;p&gt;일단 무슨 말인지 모를 확률이 높습니다. 개발언어는 개발자들이나 알아듣습니다. 함께 일하는 사람들은 개발자일 수도 있지만 아닐 수도 있습니다. 티켓에서 어떠한 일들이 일어나는지 협업하는 사람들과 같은 Page에서 논의가 이루어져야합니다. 그러기 위해서 유저의 여정 처럼 고차원적이고 추상화된 레벨에서 이야기를 나누어야 합니다. 우리의 제품은 결국 유저를 위해 존재하니까요.&lt;/p&gt;
&lt;p&gt;기술 언어들만 기입돼 있다면 놓친 스펙을 발견한다거나, 더 나은 유저 경험을 제공할 방법을 찾는 등 가치있는 논의는 멀어지게 됩니다. 그럴경우 해당 티켓은 작업이 진행되는 동안 오로지 개발자 혼자만의 판단에 의존하게 됩니다. 커뮤니케이션, 피드백을 통해 얻을 수 있는 좋은 기회를 놓치게 되는 꼴이죠. 개발 진행중 개발자가 발견한 기획/설계 미스로 인해 발생하는 일정 지연, 커뮤니케이션 코스트를 생각한다면 이는 프로젝트의 큰 리스크로 이어집니다.&lt;/p&gt;
&lt;p&gt;협업 레벨(티켓, 스토리 등)에서 알맞게 추상화된 언어(유저 여정 중심)로 이야기를 나누고 실무자들은 각자의 필드에서 전문화된 언어로 업무를 진행하면 됩니다. 마치 컴퓨터의 Low-Level에서 사용하는 언어와 High-Level에서 사용하는 언어가 다르듯, 우리의 업무도 이와 동일해야합니다. 그렇게 최적화된 커뮤니케이션으로 최선의 제품을 생산할 수 있게됩니다.&lt;/p&gt;
&lt;h2 id=&quot;-컨텍스트-스위칭-몰입&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8-%EC%8A%A4%EC%9C%84%EC%B9%AD-%EB%AA%B0%EC%9E%85&quot; aria-label=&quot; 컨텍스트 스위칭 몰입 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🔦 컨텍스트 스위칭, 몰입&lt;/h2&gt;
&lt;p&gt;예측한 일정 안에 개발을 완료했더라도 리뷰가 길어지는 경우도 있습니다. 이때 티켓과 일치된 테스트 시나리오는 리뷰어가 보다 쉽게 컨텍스트를 파악하도록 도와줍니다. 티켓과 PR을 오갈 필요 없이 테스트 시나리오를 통해 무슨 목적으로 코드가 작성됐는지 쉽게 파악이 가능합니다. 더 나아가 단순히 코드가 동작하냐 아니냐의 수준의 리뷰를 넘어, 작업자와 동일한 컨텍스트 상에서 PR에 몰입하도록 도와주어 수준높은 리뷰를 진행할 수 있게 도와줍니다.&lt;/p&gt;
&lt;p&gt;또한 잘 작성한 유저 여정(=테스트 시나리오)는 개발자 스스로에게도 도움이 됩니다. 개발자가 하나 이상의 프로젝트를 진행할 수도 있습니다. 혹은 많은 미팅에 참석할수도 있죠. 이때 몰입하여 코딩을 시작한다는 건 꽤나 에너지가 많이 필요한 일입니다. 이러한 컨텍스트 스위칭 과정에서 유저 여정을 읽는 것 만으로도 내가 어디까지 작업했는지 몰입하는데 상당한 도움을 줍니다. 시간이 지나 코드를 다시 살펴볼때도 동일한 효과를 누릴 수 있습니다.&lt;/p&gt;
&lt;h2 id=&quot;-tdd를-한다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-tdd%EB%A5%BC-%ED%95%9C%EB%8B%A4&quot; aria-label=&quot; tdd를 한다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🤝 TDD를 한다&lt;/h2&gt;
&lt;p&gt;그동안 저는 TDD의 정의를 좁게만 생각하고 있었습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;실패를 방지하기 위해 시간을 더 투자하여 테스트를 먼저 작성하는 것&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;틀린 말은 아니지만 무언가 부족해 보입니다. 그저 &lt;strong&gt;개발자의 자기 만족을&lt;/strong&gt; 위한 수단이자, 책임을 회피하기 위한 피난처로 TDD를 사용한 것처럼 보입니다. TDD를 지속하기 위한 강력한 동기로는 불충분 합니다. 그러다보니 그간 TDD를 쉽게 포기했던 것 같습니다.&lt;/p&gt;
&lt;p&gt;하지만 유저 스토리 작성과 그 과정속의 커뮤니케이션 과정을 함께 떠올리자, 더이상 TDD는 단순한 코딩이라는 행위가 아님을 깨달았습니다. 유저의 여정을 작성하여 코딩으로 이를 완성 시키는 것. 그렇게 성공적인 프로덕트를 만들기 위한 &lt;strong&gt;과정에서&lt;/strong&gt; TDD가 의미를 갖는다는 것을 말입니다. 그리하여 TDD는 테스트 커버리지 숫자로 그 존재감을 드러내는 것이 아니라 프로젝트가 원활히 진행되고 생산적인 커뮤니케이션이 이루어질 때 빛을 발하는 것이었습니다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[미니멀 프론트엔드 테스트]]></title><description><![CDATA[…]]></description><link>https://goohooh.github.io/Testing/worthy_testing/</link><guid isPermaLink="false">https://goohooh.github.io/Testing/worthy_testing/</guid><pubDate>Thu, 30 Dec 2021 15:02:00 GMT</pubDate><content:encoded>&lt;p&gt;테스트 커버리지는 얼마를 달성해야 좋을까요? 모든 코드는 테스트 대상이 돼야할까요? 하지만 테스트 작성 또한 비용이 들고 유지보수 대상이 됩니다. 이는 생산성 저하를 초래하여 프로젝트에 지장을 줄 수 있습니다.&lt;/p&gt;
&lt;h1 id=&quot;-실패할-가치가-있는-테스트를-작성한다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-%EC%8B%A4%ED%8C%A8%ED%95%A0-%EA%B0%80%EC%B9%98%EA%B0%80-%EC%9E%88%EB%8A%94-%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%A5%BC-%EC%9E%91%EC%84%B1%ED%95%9C%EB%8B%A4&quot; aria-label=&quot; 실패할 가치가 있는 테스트를 작성한다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;💎 실패할 가치가 있는 테스트를 작성한다&lt;/h1&gt;
&lt;p&gt;“작은 함수로 테스트를 시작하는 건 좋은 접근이었습니다. 하지만 그게 private한 함수라면 효용성이 낮죠.“&lt;/p&gt;
&lt;p&gt;회사에서 처음 작성한 테스트를 본 팀 리드(Ted)의 피드백이었습니다. 분기 목표로 맡고있던 프로젝트의 &lt;strong&gt;‘테스트 커버리지 10% 달성’&lt;/strong&gt;(당시 0%)‘을 잡았고, 일단 가장 시작하기 쉬워 보이는 부분을 찾아 테스트를 작성했습니다. 하지만 결과적으로 이는 근시안적인 접근이었습니다.&lt;/p&gt;
&lt;p&gt;테스트를 추가했던 부분은 다음과 같이 생겼습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;MyComponent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;/* 초기화 */&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; someState &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;/* condition1 */&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;a&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;/* condition2 */&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;b&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;/* condition3 */&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;c&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;/* someState를 사용하는 JSX */&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;someState&lt;/code&gt;를 만들어내는 부분이 즉시실행 함수(IIFE)로 컴포넌트 코드 내에 선언돼 있었고, 여러 개의 조건문으로 인해 가독성이 떨어지는 상황이었습니다. 이 복잡한 IIFE를 밖으로 빼내고 테스트를 만드는 게 가장 쉬워 보였습니다. 작게라도 케이스를 만들면, 동료들도 제가 작성한 가이드를 보면서 “이렇게 만들었구나”하고 쉽게 받아들일 수 있도록 하자는 생각이었습니다. 테스트 작성 후에는 조금이라도 테스트 커버리지가 올랐다는 생각에 뿌듯함도 살짝 느꼈습니다.&lt;/p&gt;
&lt;p&gt;하지만 Ted와 테스트를 검토한 결과, 추출된 함수는 완벽히 &lt;code class=&quot;language-text&quot;&gt;MyComponent&lt;/code&gt;의 private 함수였습니다 private 함수는 테스트해봤자 큰 효용이 없다는 말에 수긍했습니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;‘private’의 의미를 단순히 &lt;code class=&quot;language-text&quot;&gt;private&lt;/code&gt; 키워드 사용여부로 한정 짓지 않고 있습니다. 외부로 노출되지 않고, 재사용되지 않으면 ‘private 하다’라는 의미로 사용하고 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;요구사항이 바뀌어 구현이 변경돼야 한다면, 개발자는 직관적으로 위 함수만 변경해야 함을 알 수 있습니다. 당연히 작성한 테스트도 바뀌어야합니다. 여기서 private 함수 테스트가 큰 가치를 제공하지 못했다는 눈치 챌 수 있습니다. 오히려 동어반복적인 작업을 하는 부담만 줄 뿐입니다.&lt;/p&gt;
&lt;p&gt;만약 함수가 public 했다면? 다른 곳에서도 사용됐다면? 변경으로 인해 다른 곳에 작성된 테스트가 실패했을 것이고 개발자는 미리 버그를 잡을 수 있게 됩니다. 테스트는 실패할 확률이 높을 때 가치가 올라갑니다.&lt;/p&gt;
&lt;p&gt;여러 곳에서 여러 방법으로 사용되는 코드일수록 테스트할 가치가 높으며, 깨졌을 때 유용한 정보를 얻을 수 있습니다. 위 코드에서는 차라리 하나의 화면을 책임지면서 public하기도 한 &lt;code class=&quot;language-text&quot;&gt;MyComponent&lt;/code&gt; 전체를 테스트하는게 더 가치가 높다고 볼 수 있습니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;TDD를 하고 있다면 얼마든지 private 함수를 테스트하게 될 수 있습니다. 물론 그 브랜치가 머지되기 전에 private 함수 테스트를 걷어내야겠지만요.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;by Ted&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;-테스트만을-위한-테스트는-피한다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%A7%8C%EC%9D%84-%EC%9C%84%ED%95%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%8A%94-%ED%94%BC%ED%95%9C%EB%8B%A4&quot; aria-label=&quot; 테스트만을 위한 테스트는 피한다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;😔 테스트만을 위한 테스트는 피한다&lt;/h1&gt;
&lt;p&gt;앞선 교훈을 발판삼아 이번엔 여러 곳에서 공통으로 사용하는 코드를 살펴봤습니다. 프로젝트 구조를 살짝 설명드리자면, 여러 페이지에 걸쳐 유사한 비즈니스 로직을 활용하는 코드를 분리해서 &lt;code class=&quot;language-text&quot;&gt;domains&lt;/code&gt; 라는 폴더 밑에서 별도로 관리하고 있습니다. 태생부터가 여러 곳에서 사용하기 위한 코드이니만큼, &lt;code class=&quot;language-text&quot;&gt;domains&lt;/code&gt; 하위의 코드들은 분명 테스트 대상 1순위라고 볼 수 있습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useComplexHook&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; data1 &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useDomainRelated1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// API 호출&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; data2 &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useDomainRelated2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// API 호출&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;/* 복잡한 data1 &amp;amp; data2 가공 및 처리 */&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// data1 &amp;amp; data2 기반 복잡한 객체&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위 custom hook은&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;API 호출&lt;/li&gt;
&lt;li&gt;데이터 가공 및 처리&lt;/li&gt;
&lt;li&gt;여러 key/value를 갖는 객체 리턴&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;크게 3가지 부분으로 이루어져 있습니다. 나름 테스트에 익숙해진 지금 보자면 API 호출부를 mocking하고, 리턴값을 assertion하여 테스트를 작성하면 되겠다는 생각이 바로 떠오릅니다.&lt;/p&gt;
&lt;p&gt;하지만 아직 react hook 테스트가 익숙치 않았던 당시엔 &lt;em&gt;‘테스트하기 쉽게 데이터 가공/처리 부를 별도 함수로 빼내서 테스트하는 건 어떨까’&lt;/em&gt; 생각 했습니다만… 이는 첫번째 사례에서 저질렀던 실수의 반복이었습니다. &lt;code class=&quot;language-text&quot;&gt;useComplexHook&lt;/code&gt;의 private한 함수를 만들어 테스트하는 꼴입니다.&lt;/p&gt;
&lt;p&gt;Ted는 추가로 생각할 지점을 일러주었습니다. 유지보수하기 더 쉽게 코드 구조를 바꾸고, 그럼으로써 테스트하기 &lt;strong&gt;쉽게&lt;/strong&gt; 되는 건 좋습니다. 그러나 테스트하기 &lt;strong&gt;쉬워진다는 이유만으로&lt;/strong&gt; 코드 구조를 바꾸는 것은 논리의 선후가 뒤바뀐 발상이라는 것입니다.&lt;/p&gt;
&lt;h1 id=&quot;-테스트-작성-전-고려사항&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%9E%91%EC%84%B1-%EC%A0%84-%EA%B3%A0%EB%A0%A4%EC%82%AC%ED%95%AD&quot; aria-label=&quot; 테스트 작성 전 고려사항 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;✍ 테스트 작성 전 고려사항&lt;/h1&gt;
&lt;p&gt;TDD를 하고있는 상황이 아니라면, 테스트를 작성시 “Why”를 먼저 생각해 봐야합니다. 단순히 커버리지에 집중했다간 의미없이 시간낭비만 하게 되는 꼴이니까요. 테스트 작성시 다음 사항들을 고려해봅시다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;테스트 대상이 여러 곳에서 사용되는가?&lt;/li&gt;
&lt;li&gt;자명하지 않은 이유로 실패할 수 있는 테스트인가?&lt;/li&gt;
&lt;li&gt;테스트를 더 용이하게 만들기 위해 기존 코드구조를 바꿔야 한다면, 테스트 이외의 측면에도 이점이 있는가?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;부족한 경험과 지식으로 테스트를 작성하다보면, 생각 이상으로 시간을 잡아먹는 부분이 많이 발생합니다.(삽질을 많이 하게 됩니다…) 그리고 때론 내가 잘 하고 있는건지, 허튼짓을 하는건 아닌지 의문이 들기도 합니다. 요구사항은 바뀌기 마련이고 이에따라 코드도 변경해야 하는데, 작성해둔 테스트가 짐짝처럼 느껴질 수도 있습니다. 이런 경험이 반복되면 테스트 작성 의지를 잃어버릴 수도 있습니다.&lt;/p&gt;
&lt;p&gt;하지만 위 3가지 질문의 대답이 모두 Yes라면, 결코 시간낭비를 하고 있는건 아니니 용기 내어 마음껏 테스트를 작성해보시길 바랍니다. 분명 그 노력은 헛되지 않고, 이후 여러분이 즐겁고 마음 편히 프로젝트를 진행하도록 도와줄 것입니다. 🙏&lt;/p&gt;</content:encoded></item><item><title><![CDATA[about]]></title><description><![CDATA[Phil ❤ agile]]></description><link>https://goohooh.github.io/resume-en/</link><guid isPermaLink="false">https://goohooh.github.io/resume-en/</guid><pubDate>Sun, 27 Jan 2019 16:21:13 GMT</pubDate><content:encoded>&lt;h1 id=&quot;phil&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#phil&quot; aria-label=&quot;phil permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Phil&lt;/h1&gt;
&lt;div align=&quot;center&quot;&gt;
&lt;p&gt;❤ agile&lt;/p&gt;
&lt;/div&gt;</content:encoded></item></channel></rss>